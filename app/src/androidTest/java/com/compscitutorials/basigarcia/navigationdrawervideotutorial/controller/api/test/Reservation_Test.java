///**
// * File generated by Magnet rest2mobile 1.1 - May 19, 2016 9:04:38 AM
// * @see {@link http://developer.magnet.com}
// */
//
//package com.compscitutorials.basigarcia.navigationdrawervideotutorial.controller.api.test;
//
//import android.location.Address;
//import android.location.Geocoder;
//import android.test.InstrumentationTestCase;
//import android.test.suitebuilder.annotation.LargeTest;
//import android.test.suitebuilder.annotation.Suppress;
//import android.util.Log;
//
//import com.compscitutorials.basigarcia.navigationdrawervideotutorial.controller.api.FactoryAPI;
//import com.compscitutorials.basigarcia.navigationdrawervideotutorial.controller.api.FactoryAPIFactory;
//import com.compscitutorials.basigarcia.navigationdrawervideotutorial.model.beans._ParkingsResult;
//import com.magnet.android.mms.MagnetMobileClient;
//import com.magnet.android.mms.async.Call;
//import com.magnet.android.mms.exception.SchemaException;
//
//import java.io.IOException;
//import java.util.List;
//import java.util.concurrent.ExecutionException;
//
///**
//* This is generated stub to test {@link FactoryAPI}
//* <p>
//* All test cases are suppressed by defaullt. To run the test, you need to fix all the FIXMEs first :
//* <ul>
//* <li>Set proper value for the parameters
//* <li>Remove out the @Suppress annotation
//* <li>(optional)Add more asserts for the result
//* <ul><p>
//*/
//
//public class Reservation_Test extends InstrumentationTestCase {
//  private FactoryAPI factoryAPI;
//
//
//    public final String TAG="Reservation_Test";
//
////    @Suppress
//  @Override
//  protected void setUp() throws Exception {
//    super.setUp();
//
//   // Instantiate a controller
//    MagnetMobileClient magnetClient = MagnetMobileClient.getInstance(this.getInstrumentation().getTargetContext());
//FactoryAPIFactory controllerFactory = new FactoryAPIFactory(magnetClient);
//   factoryAPI = controllerFactory.obtainInstance();
//
//    assertNotNull(factoryAPI);
//}
//
//  /**
//   * Generated unit test for {@link FactoryAPI#getUsers}
//   */
////  @Suppress //FIXME : set proper parameter value and un-suppress this test case
////  @SmallTest
////  public void testGetUsers() throws SchemaException, ExecutionException, InterruptedException {
////    Call<List<UsersResult>> callObject = factoryAPI.getUsers(null);
////    assertNotNull(callObject);
////
////    List<UsersResult> result = callObject.get();
////    assertNotNull(result);
////    //TODO : add more asserts
////  }
//
//  /**
//   * Generated unit test for {@link FactoryAPI#get_Parkings}
//   */
////FIXME : set proper parameter value and un-suppress this test case
//
//
//
//
//@LargeTest
//    public void testTest_Parking_Post() throws Exception {
//
//
//
//
//
//
//    }
//
//@Suppress
//  public void testGet_Parkings() throws SchemaException, ExecutionException, InterruptedException {
//
//
//      List<Address> geocodeMatches = null;
//      String Address1;
//      String Address2;
//      String State;
//      String Zipcode;
//      String Country;
//
//
//      Call<List<_ParkingsResult>> callObject = factoryAPI.get_Parkings(null);
//    assertNotNull(callObject);
//
//    List<_ParkingsResult> result = callObject.get();
//    assertNotNull(result);
//
//      Log.i(TAG, "testGet_Parkings: "+result.get(2).getX());
//      Log.i(TAG, "testGet_Parkings: "+result.get(2).getY());
//
//
//      try {
//          geocodeMatches =new Geocoder(this.getInstrumentation().getTargetContext()).getFromLocation(38.8874245, -77.0200729, 1);
//      } catch (IOException e) {
//          e.printStackTrace();
//      }
//
//      if (!geocodeMatches.isEmpty())
//      {
//          Address1 = geocodeMatches.get(0).getAddressLine(0);
//          Address2 = geocodeMatches.get(0).getAddressLine(1);
//          State = geocodeMatches.get(0).getAdminArea();
//          Zipcode = geocodeMatches.get(0).getPostalCode();
//          Country = geocodeMatches.get(0).getCountryName();
//
//          Log.i(TAG, "test Geolocation: "+Address1);
//          Log.i(TAG, "test Geolocation: "+Address2);
//          Log.i(TAG, "test Geolocation: "+State);
//          Log.i(TAG, "test Geolocation: "+Zipcode);
//          Log.i(TAG, "test Geolocation: "+Country);
//      }
//
//
//
//      //TODO : add more asserts
//  }
//
//}
//
